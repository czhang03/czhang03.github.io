@article{Kozen_1994,
  title    = {A Completeness Theorem for Kleene Algebras and the Algebra of Regular Events},
  volume   = {110},
  issn     = {08905401},
  doi      = {10.1006/inco.1994.1037},
  number   = {2},
  journal  = {Information and Computation},
  author   = {Kozen, Dexter},
  year     = {1994},
  month    = {May},
  pages    = {366–390},
  language = {en}
}

@article{Kozen_1997,
  title        = {Kleene algebra with tests},
  volume       = {19},
  issn         = {0164-0925},
  doi          = {10.1145/256167.256195},
  abstractnote = {We introduce Kleene algebra with tests, an equational system for manipulating programs. We give a purely equational proof, using Kleene algebra with tests and commutativity conditions, of the following classical result: every while program can be simulated by a while program can be simulated by a while program with at most one while loop. The proof illustrates the use of Kleene algebra with tests and commutativity conditions in program equivalence proofs.},
  number       = {3},
  journal      = {ACM Transactions on Programming Languages and Systems},
  author       = {Kozen, Dexter},
  year         = {1997},
  month        = {May},
  pages        = {427–443}
}

@article{Smolka_Foster_Hsu_Kappé_Kozen_Silva_2020,
  title        = {Guarded Kleene algebra with tests: verification of uninterpreted programs in nearly linear time},
  volume       = {4},
  issn         = {2475-1421},
  doi          = {10.1145/3371129},
  abstractnote = {Guarded Kleene Algebra with Tests (GKAT) is a variation on Kleene Algebra with Tests (KAT) that arises by restricting the union (+) and iteration (*) operations from KAT to predicate-guarded versions. We develop the (co)algebraic theory of GKAT and show how it can be efficiently used to reason about imperative programs. In contrast to KAT, whose equational theory is PSPACE-complete, we show that the equational theory of GKAT is (almost) linear time. We also provide a full Kleene theorem and prove completeness for an analogue of Salomaa’s axiomatization of Kleene Algebra.},
  number       = {POPL},
  journal      = {Proceedings of the ACM on Programming Languages},
  author       = {Smolka, Steffen and Foster, Nate and Hsu, Justin and Kappé, Tobias and Kozen, Dexter and Silva, Alexandra},
  year         = {2020},
  month        = {Jan},
  pages        = {1–28},
  language     = {en}
}

 @article{Pous_Rot_Wagemaker_2022,
  title        = {On Tools for Completeness of Kleene Algebra with Hypotheses},
  url          = {http://arxiv.org/abs/2210.13020},
  doi          = {10.48550/arXiv.2210.13020},
  abstractnote = {In the literature on Kleene algebra, a number of variants have been proposed which impose additional structure specified by a theory, such as Kleene algebra with tests (KAT) and the recent Kleene algebra with observations (KAO), or make specific assumptions about certain constants, as for instance in NetKAT. Many of these variants fit within the unifying perspective offered by Kleene algebra with hypotheses, which comes with a canonical language model constructed from a given set of hypotheses. For the case of KAT, this model corresponds to the familiar interpretation of expressions as languages of guarded strings. A relevant question therefore is whether Kleene algebra together with a given set of hypotheses is complete with respect to its canonical language model. In this paper, we revisit, combine and extend existing results on this question to obtain tools for proving completeness in a modular way. We showcase these tools by giving new and modular proofs of completeness for KAT, KAO and NetKAT, and we prove completeness for new variants of KAT: KAT extended with a constant for the full relation, KAT extended with a converse operation, and a version of KAT where the collection of tests only forms a distributive lattice.},
  note         = {arXiv:2210.13020 [cs]},
  number       = {arXiv:2210.13020},
  publisher    = {arXiv},
  author       = {Pous, Damien and Rot, Jurriaan and Wagemaker, Jana},
  year         = {2022},
  month        = {Oct}
}

